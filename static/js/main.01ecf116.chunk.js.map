{"version":3,"sources":["components/Suggestion/Suggestion.js","components/OutputList/OutputList.js","components/UserInput/UserInput.js","components/Countries.js","App.js","serviceWorker.js","index.js"],"names":["Suggestion","props","className","name","OutputList","list","suggestionsList","length","map","sugName","key","UserInput","placeholder","onChange","inputChange","Countries","split","App","state","suggestions","text","typeCountryHandler","event","value","target","regex","RegExp","sort","filter","v","test","setState","href","rel","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mVAWeA,G,MARI,SAAAC,GACjB,OACE,yBAAKC,UAAU,cACb,2BAAID,EAAME,SCqBDC,G,MAvBI,SAAAH,GACjB,IAAsBI,EAYtB,OACE,yBAAKH,UAAU,cAZK,KADAG,EAcHJ,EAAMK,iBAbdC,OACA,uBAAGL,UAAU,SAAb,kBAGL,uBAAGA,UAAU,kBACVG,EAAKE,OADR,cAC2C,IAAhBF,EAAKE,OAAe,IAAM,KAStDN,EAAMK,gBAAgBE,KAAI,SAAAC,GACzB,OAAO,kBAAC,EAAD,CAAYC,IAAKD,EAASN,KAAMM,UCRhCE,G,MAVG,SAAAV,GAChB,OACE,2BACEC,UAAU,QACVU,YAAY,iBACZC,SAAUZ,EAAMa,gBCgQPC,EAxQI,ulTAsQaC,MAAM,MCrLvBC,G,iNA1EbC,MAAQ,CACNC,YAAa,GACbC,KAAM,I,EAGRC,mBAAqB,SAAAC,GACnB,IAAMC,EAAQD,EAAME,OAAOD,MACvBJ,EAAc,GAClB,GAAII,EAAO,CACT,IAAME,EAAQ,IAAIC,OAAJ,WAAeH,GAAS,KACtCJ,EAAcJ,EAAUY,OAAOC,QAAO,SAAAC,GAAC,OAAIJ,EAAMK,KAAKD,MAExD,EAAKE,UAAS,iBAAO,CACnBZ,cACAC,KAAMG,O,wEAIR,OACE,yBAAKrB,UAAU,OACb,yBAAKA,UAAU,SACb,gDACA,yPAMA,kGAGA,6BACE,uCACA,wBAAIA,UAAU,eACZ,wBAAIA,UAAU,oBACZ,uBACE8B,KAAK,kCACLR,OAAO,SACPS,IAAI,uBAEJ,uBAAG/B,UAAU,oBAGjB,wBAAIA,UAAU,oBACZ,uBACE8B,KAAK,+CACLR,OAAO,SACPS,IAAI,uBAEJ,uBAAG/B,UAAU,mBAGjB,wBAAIA,UAAU,oBACZ,uBACE8B,KAAK,yCACLR,OAAO,SACPS,IAAI,uBAEJ,uBAAG/B,UAAU,wBAMvB,yBAAKA,UAAU,QACb,iDACA,kBAAC,EAAD,CAAWY,YAAaoB,KAAKb,qBAC7B,kBAAC,EAAD,CAAYf,gBAAiB4B,KAAKhB,MAAMC,oB,GApEhCgB,IAAMC,YCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.01ecf116.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Suggestion.css\";\n\nconst Suggestion = props => {\n  return (\n    <div className=\"suggestion\">\n      <p>{props.name}</p>\n    </div>\n  );\n};\n\nexport default Suggestion;\n","import React from \"react\";\nimport Suggestion from \"../Suggestion/Suggestion\";\nimport \"./OutputList.css\";\n\nconst OutputList = props => {\n  const noSuggestions = list => {\n    if (list.length === 0) {\n      return <p className=\"alert\">No suggestions</p>;\n    } else {\n      return (\n        <p className=\"alert mb-alert\">\n          {list.length} suggestion{list.length === 1 ? \" \" : \"s\"}\n        </p>\n      );\n    }\n  };\n\n  return (\n    <div className=\"outputList\">\n      {noSuggestions(props.suggestionsList)}\n      {props.suggestionsList.map(sugName => {\n        return <Suggestion key={sugName} name={sugName} />;\n      })}\n    </div>\n  );\n};\n\nexport default OutputList;\n","import React from \"react\";\nimport \"./UserInput.css\";\n\nconst UserInput = props => {\n  return (\n    <input\n      className=\"input\"\n      placeholder=\"Type a Country\"\n      onChange={props.inputChange}\n    />\n  );\n};\n\nexport default UserInput;\n","const CountriesList = `Ascension Island 🇦🇨\nAndorra 🇦🇩\nUnited Arab Emirates 🇦🇪\nAfghanistan 🇦🇫\nAntigua & Barbuda 🇦🇬\nAnguilla 🇦🇮\nAlbania 🇦🇱\nArmenia 🇦🇲\nAngola 🇦🇴\nAntarctica 🇦🇶\nArgentina 🇦🇷\nAmerican Samoa 🇦🇸\nAustria 🇦🇹\nAustralia 🇦🇺\nAruba 🇦🇼\nÅland Islands 🇦🇽\nAzerbaijan 🇦🇿\nBosnia & Herzegovina 🇧🇦\nBarbados 🇧🇧\nBangladesh 🇧🇩\nBelgium 🇧🇪\nBurkina Faso 🇧🇫\nBulgaria 🇧🇬\nBahrain 🇧🇭\nBurundi 🇧🇮\nBenin 🇧🇯\nSt. Barthélemy 🇧🇱\nBermuda 🇧🇲\nBrunei 🇧🇳\nBolivia 🇧🇴\nCaribbean Netherlands 🇧🇶\nBrazil 🇧🇷\nBahamas 🇧🇸\nBhutan 🇧🇹\nBouvet Island 🇧🇻\nBotswana 🇧🇼\nBelarus 🇧🇾\nBelize 🇧🇿\nCanada 🇨🇦\nCocos (Keeling) Islands 🇨🇨\nCongo - Kinshasa 🇨🇩\nCentral African Republic 🇨🇫\nCongo - Brazzaville 🇨🇬\nSwitzerland 🇨🇭\nCôte d’Ivoire 🇨🇮\nCook Islands 🇨🇰\nChile 🇨🇱\nCameroon 🇨🇲\nChina 🇨🇳\nColombia 🇨🇴\nClipperton Island 🇨🇵\nCosta Rica 🇨🇷\nCuba 🇨🇺\nCape Verde 🇨🇻\nCuraçao 🇨🇼\nChristmas Island 🇨🇽\nCyprus 🇨🇾\nCzechia 🇨🇿\nGermany 🇩🇪\nDiego Garcia 🇩🇬\nDjibouti 🇩🇯\nDenmark 🇩🇰\nDominica 🇩🇲\nDominican Republic 🇩🇴\nAlgeria 🇩🇿\nCeuta & Melilla 🇪🇦\nEcuador 🇪🇨\nEstonia 🇪🇪\nEgypt 🇪🇬\nWestern Sahara 🇪🇭\nEritrea 🇪🇷\nSpain 🇪🇸\nEthiopia 🇪🇹\nEuropean Union 🇪🇺\nFinland 🇫🇮\nFiji 🇫🇯\nFalkland Islands 🇫🇰\nMicronesia 🇫🇲\nFaroe Islands 🇫🇴\nFrance 🇫🇷\nGabon 🇬🇦\nUnited Kingdom 🇬🇧\nGrenada 🇬🇩\nGeorgia 🇬🇪\nFrench Guiana 🇬🇫\nGuernsey 🇬🇬\nGhana 🇬🇭\nGibraltar 🇬🇮\nGreenland 🇬🇱\nGambia 🇬🇲\nGuinea 🇬🇳\nGuadeloupe 🇬🇵\nEquatorial Guinea 🇬🇶\nGreece 🇬🇷\nSouth Georgia & South Sandwich Islands 🇬🇸\nGuatemala 🇬🇹\nGuam 🇬🇺\nGuinea-Bissau 🇬🇼\nGuyana 🇬🇾\nHong Kong SAR China 🇭🇰\nHeard & McDonald Islands 🇭🇲\nHonduras 🇭🇳\nCroatia 🇭🇷\nHaiti 🇭🇹\nHungary 🇭🇺\nCanary Islands 🇮🇨\nIndonesia 🇮🇩\nIreland 🇮🇪\nIsrael 🇮🇱\nIsle of Man 🇮🇲\nIndia 🇮🇳\nBritish Indian Ocean Territory 🇮🇴\nIraq 🇮🇶\nIran 🇮🇷\nIceland 🇮🇸\nItaly 🇮🇹\nJersey 🇯🇪\nJamaica 🇯🇲\nJordan 🇯🇴\nJapan 🇯🇵\nKenya 🇰🇪\nKyrgyzstan 🇰🇬\nCambodia 🇰🇭\nKiribati 🇰🇮\nComoros 🇰🇲\nSt. Kitts & Nevis 🇰🇳\nNorth Korea 🇰🇵\nSouth Korea 🇰🇷\nKuwait 🇰🇼\nCayman Islands 🇰🇾\nKazakhstan 🇰🇿\nLaos 🇱🇦\nLebanon 🇱🇧\nSt. Lucia 🇱🇨\nLiechtenstein 🇱🇮\nSri Lanka 🇱🇰\nLiberia 🇱🇷\nLesotho 🇱🇸\nLithuania 🇱🇹\nLuxembourg 🇱🇺\nLatvia 🇱🇻\nLibya 🇱🇾\nMorocco 🇲🇦\nMonaco 🇲🇨\nMoldova 🇲🇩\nMontenegro 🇲🇪\nSt. Martin 🇲🇫\nMadagascar 🇲🇬\nMarshall Islands 🇲🇭\nNorth Macedonia 🇲🇰\nMali 🇲🇱\nMyanmar (Burma) 🇲🇲\nMongolia 🇲🇳\nMacao Sar China 🇲🇴\nNorthern Mariana Islands 🇲🇵\nMartinique 🇲🇶\nMauritania 🇲🇷\nMontserrat 🇲🇸\nMalta 🇲🇹\nMauritius 🇲🇺\nMaldives 🇲🇻\nMalawi 🇲🇼\nMexico 🇲🇽\nMalaysia 🇲🇾\nMozambique 🇲🇿\nNamibia 🇳🇦\nNew Caledonia 🇳🇨\nNiger 🇳🇪\nNorfolk Island 🇳🇫\nNigeria 🇳🇬\nNicaragua 🇳🇮\nNetherlands 🇳🇱\nNorway 🇳🇴\nNepal 🇳🇵\nNauru 🇳🇷\nNiue 🇳🇺\nNew Zealand 🇳🇿\nOman 🇴🇲\nPanama 🇵🇦\nPeru 🇵🇪\nFrench Polynesia 🇵🇫\nPapua New Guinea 🇵🇬\nPhilippines 🇵🇭\nPakistan 🇵🇰\nPoland 🇵🇱\nSt. Pierre & Miquelon 🇵🇲\nPitcairn Islands 🇵🇳\nPuerto Rico 🇵🇷\nPalestinian Territories 🇵🇸\nPortugal 🇵🇹\nPalau 🇵🇼\nParaguay 🇵🇾\nQatar 🇶🇦\nRéunion 🇷🇪\nRomania 🇷🇴\nSerbia 🇷🇸\nRussia 🇷🇺\nRwanda 🇷🇼\nSaudi Arabia 🇸🇦\nSolomon Islands 🇸🇧\nSeychelles 🇸🇨\nSudan 🇸🇩\nSweden 🇸🇪\nSingapore 🇸🇬\nSt. Helena 🇸🇭\nSlovenia 🇸🇮\nSvalbard & Jan Mayen 🇸🇯\nSlovakia 🇸🇰\nSierra Leone 🇸🇱\nSan Marino 🇸🇲\nSenegal 🇸🇳\nSomalia 🇸🇴\nSuriname 🇸🇷\nSouth Sudan 🇸🇸\nSão Tomé & Príncipe 🇸🇹\nEl Salvador 🇸🇻\nSint Maarten 🇸🇽\nSyria 🇸🇾\nEswatini 🇸🇿\nTristan Da Cunha 🇹🇦\nTurks & Caicos Islands 🇹🇨\nChad 🇹🇩\nFrench Southern Territories 🇹🇫\nTogo 🇹🇬\nThailand 🇹🇭\nTajikistan 🇹🇯\nTokelau 🇹🇰\nTimor-Leste 🇹🇱\nTurkmenistan 🇹🇲\nTunisia 🇹🇳\nTonga 🇹🇴\nTurkey 🇹🇷\nTrinidad & Tobago 🇹🇹\nTuvalu 🇹🇻\nTaiwan 🇹🇼\nTanzania 🇹🇿\nUkraine 🇺🇦\nUganda 🇺🇬\nU.S. Outlying Islands 🇺🇲\nUnited Nations 🇺🇳\nUnited States 🇺🇸\nUruguay 🇺🇾\nUzbekistan 🇺🇿\nVatican City 🇻🇦\nSt. Vincent & Grenadines 🇻🇨\nVenezuela 🇻🇪\nBritish Virgin Islands 🇻🇬\nU.S. Virgin Islands 🇻🇮\nVietnam 🇻🇳\nVanuatu 🇻🇺\nWallis & Futuna 🇼🇫\nSamoa 🇼🇸\nKosovo 🇽🇰\nYemen 🇾🇪\nMayotte 🇾🇹\nSouth Africa 🇿🇦\nZambia 🇿🇲\nZimbabwe 🇿🇼\nEngland 🏴󠁧󠁢󠁥󠁮󠁧󠁿\nScotland 🏴󠁧󠁢󠁳󠁣󠁴󠁿\nWales 🏴󠁧󠁢󠁷󠁬󠁳󠁿`;\n\nconst Countries = CountriesList.split(\"\\n\");\n\nexport default Countries;\n","import React from \"react\";\nimport OutputList from \"./components/OutputList/OutputList\";\nimport UserInput from \"./components/UserInput/UserInput\";\nimport Countries from \"./components/Countries\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  state = {\n    suggestions: [],\n    text: \"\"\n  };\n\n  typeCountryHandler = event => {\n    const value = event.target.value;\n    let suggestions = [];\n    if (value) {\n      const regex = new RegExp(`^${value}`, \"i\"); // i to ignore case\n      suggestions = Countries.sort().filter(v => regex.test(v));\n    }\n    this.setState(() => ({\n      suggestions,\n      text: value\n    }));\n  };\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"intro\">\n          <h1>Text Prediction!</h1>\n          <p>\n            This is one of my first projects in Reactjs. There is a predifined\n            object with the countries names and flags. All you have to do is\n            type in a country name and it will look it up for you refreshing the\n            DOM in real time.\n          </p>\n          <p>\n            I used React, Regular Expressions and Flex box for the CSS Styling.\n          </p>\n          <div>\n            <h3>FIND ME</h3>\n            <ul className=\"list-inline\">\n              <li className=\"list-inline-item\">\n                <a\n                  href=\"https://twitter.com/micael_sosa\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  <i className=\"fa fa-twitter\"></i>\n                </a>\n              </li>\n              <li className=\"list-inline-item\">\n                <a\n                  href=\"https://github.com/mikesosa?tab=repositories\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  <i className=\"fa fa-github\"></i>\n                </a>\n              </li>\n              <li className=\"list-inline-item\">\n                <a\n                  href=\"https://www.linkedin.com/in/mike-sosa/\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  <i className=\"fa fa-linkedin\"></i>\n                </a>\n              </li>\n            </ul>\n          </div>\n        </div>\n        <div className=\"form\">\n          <h2>Type in a Country</h2>\n          <UserInput inputChange={this.typeCountryHandler} />\n          <OutputList suggestionsList={this.state.suggestions} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}